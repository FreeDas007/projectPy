['0.4',"Инструкция. \nИзучение урока идет в несколько шагов.\n
Немного описания отдельных языковых конструкций, потом упражнения и следующая итерация: теория + упражнения.
\n",
 [
    ["*** Строковые переменные (str) ***\n\n
    Переменная становится строковой в момент присвоения ей строкового значения (строки символов).\n\n
    a='Abc'\n
	c=\"012345\"\n
	myName='Виталий Александрович'\n
	userName=myName\n
	long_str='''Длинная строка в\n
	несколько строк. \n
	Здесь используется подряд 3 одинарных или двойных апострофов. '''\n\n
	
	#Над строковыми переменными можно производить различные операции:\n
	x=a+c+a		# соединение, сложение строк. Результат: 'Abc012345Abc'\n
	z=a+100		# ОШИБКА: участвуют переменные разных типов\n
	z=a+str(100)	# сейчас правильно: 'складываем' 'Abc' и '100'\n\n
	
	L=len(a)	# 3, функция len() определяет длину строки (число символов в строке)\n
	len(a+b)	# 9, длина строки  'Abc012345'\n\n
	
	S='aaa'.upper()	# S='AAA', функция upper() переводит все символы в верхних регистр, в заглавные буквы\n
	s='AAA'.lower()	# s='aaa', функция lower() переводит все символы в нижний регистр, в прописные буквы\n
	Sa=a.upper()+a.lower()	# Sa='ABCabc', применим функции к переменным и потом сложим\n
	w=a.lower().upper()		# 'ABC', здесь выполняется 'паровозик', цепочка последовательного выполнения функций:
	  к переменной a применим функцию lower(), а к полученному результату('abc') применим функцию upper()
	z=3*a   # 'AbcAbcAbc', строка 'Abc' умножается на 3, z=a+a+a\n
	n=4\n
	zz=a*n  # 'AbcAbcAbcAbc', строка 'Abc' умножается на числовую переменную (n=4)\n\n
	
	Иногда необходимо убрать пробелы в переменной справа и слева:\n
	' abc '.strip()  # 'abc', окамляющие пробелы в переменной слева и справа удаляются. \n
	Кстати, убирать можно не только пробелы, но и любые другие заданные символы:\n
	h='...Привет! ...'\n
	h.strip('.')  - получим 'Привет!'\n
	'xwxABCxxww'.strip('xw')  - получим 'ABC'\n
	'xwxAxBwCxxww'.strip('xw')  - получим 'AxBwC', удаляются 'x' и 'w' только слева и справа\n
	Есть еще пара похожих функций: lstrip() и rstrip(). В чем разница? Правильно:\n
	lstrip() - удаляет пробелы или заданные символы только слева,\n
	rstrip() - удаляет только справа\n
	'...AAA...'.lsrip('.') - получаем 'AAA...'\n
	'...AAA...'.rsrip('.') - получаем '...AAA'\n
    \n",
   [
    ["Чему равно len('Юра,Коля') ?",'8',1],
    ["S='Маша, я люблю тебя'*100\nЧему равно len(S)?",'1800',2],
    ["S='a'*100 + 'bc'*100\nЧему равно len(S)?",'300',3],
	["Что будет в результате: print(3*('w'+'z'))?",'wzwzwz',2],
	["w='Миша'.upper()+', подойди'",'МИША, подойди',3]
   ]
 ],
	["*** find(), index(), replace(), pop() ***\n
\n
S='Молоко'\n
email='ivan@yandex.ru'\n
ITs='MS,IBM,Googe,Яндекс,Facebook'\n
\n
Вопросы:\n
сколько букв 'о' в строке S ?\n
правильно ли написан e-mail в переменной email ?\n
входит ли Яндекс в список it-гигантов, который указан в ITs ?\n
\n
Python предлагает несколько функций, которые могут помочь найти ответ на поставленные вопросы.\n
Далее используются равнозначные термины: индекс, смещение. Индекс, смещение начинаются всегда в компьютерном мире с нуля!\n
i=S.index('о')  - найти индекс подстроки (в данном случае, это один символ) 'о' в строке S. i=1\n
j=email.find('@')  - найти индекс подстроки '@' в строке email. j=4  \n
k=ITs.find('Яндекс')  - k=13\n
n=S.count('о') - количество подстрок 'о' в строке S. n=3\n
ITs2=ITs.replace('MS','Microsoft') - заменить все подстроки 'MS' на 'Microsoft'. ITs2='Microsoft,IBM,Googe,Яндекс,Facebook'\n
names='Коля,Маша,Вася,'\n
names=names.pop()  - удалить последний символ в строке. Здесь происходит переприсваивание, т.е. names как результат операции - это уже другая переменная с тем же именем и новым значением names='Коля,Маша,Вася'. \n
pop(2) - удаляет символ с индексом 2.\n
\n
Чтобы ответить на вышестоящие вопросы мы использовали описанные функции.\n
На первый вопрос мы ответили использованием функции count().\n
На второй вопрос мы частично ответили использовав функцию find(). Ответ функции был - 4. Это и показало, что необходимый символ '@' присутствует в переменной. Если бы ответ функции был бы равен -1, то это однозначно говорит, что е-адрес ошибочный.\n
На третий вопрос - ответ функции не равный -1  означает, что Яндекс входит в указанный список it-гигантов. \n
\n
Замечания:\n
1. index() и find() внешне идентичны. Но есть отличие: index() выдает ошибку, если искомый фрагмент отсутствует в переменной:\n
'abc'.index('xx') - выдает ОШИБКУ, в отличие от find()\n
2. 'abc'.find('xx') - выдаст результат равный -1. Т.о. если есть подстрока, то результат >=0 \n
3. как правило, у функций типа index(), find() возможен второй аргумент:\n
i=S.found('о',2) - второй параметр означает, что поиск подстроки начнется с позиции 2. В нашем случае, результат будет равен 3\n
4. если указанной подстроки нет, то count() выдаст 0, число подстрок = 0\n
5. replace() - можно использовать и для удаления определенного фрагмента:\n
ITs3=ITs.replace('Facebook','')  - здесь мы заменили 'Facebook' на пустую строку, т.е. удалили. ITs2='MS,IBM,Googe,Яндекс,'\n
6. Данные функции еще называются методами объектов строкового типа.\n\n
	",
   [
   ["Результат выражения: \'Маша ела кашу\'.index(\'ела\')",'5',1],
   ["Результат выражения: (4*\'Такси!\').count(\'си!\')",'4',1],
   ["Результат выражения: \'оля, иди сюда\'.replace(\'оля\',\'Ольга\')",'Ольга, иди сюда',1],
   ["Результат:(\'abcd\').pop().pop()",'ab',1],
   ["Результат:('\Хорошо'\*4).count(\'о\')",'12',2],
   ["Результат: \'xyz\'.find(\'abc\')+(\'xyz\').find(\'y\')",'0',2],
   ["Результат: \'Иван\'.find(\'и\')+(\'Иван\'.count(\'и\')",'-1',3],
   ["Результат: ('Иван'.lower().find('и'))+'Иван'.replace('Иван','Сергей').count('е')",'2',3]
   ],
 'None',
  [
  ['dQ1','y',1],
  ['dQ2','n',1]
  ]
],
 ["*** Срезы ***\n
 Python позволяет интерпретировать строки из символов как множество этих самых символов.\n
 Например, S='Молоко' - строковая переменная и при этом можно обратится к любому символу 
 этой переменной:\n
 S[0],S[1], S[2], S[3], S[4], S[5] как символы 'М', 'о', 'л', 'о', 'к', 'о'.\n
 M='вол', тогда Mx=M[2]+M[1]+M[0] будет иметь значение 'лом'\n
 \n
 В квадратных скобках указывается смещение или индекс символа, который всегда начинается с нуля! \n
 Строковые переменные неизменяемые! Поэтому изменить строковую переменную S, например, таким образом S[1]='z'  вызовет ошибку.\n
 Интересный прием: S[-1] - означает первый символ с конца ('о'), S[-2] - второй символ с конца ('к').\n\n
 Но Python пошел еще дальше и предложил такую языковую конструкцию как срезы:\n
 S='Молоко'\n
 S[0:3] - это подстрока символов с 0 до 3, S[0],S[1],S[2] - 'Мол'\n
 S[1:4] - подстрока символов с индексами от 1 до 4, S[1],S[2],S[3] - 'оло'\n
 S[2:] - подстрока от 2 до конца строки, S[2],S[3],S[4],S[5] - 'локо'\n
 S[:3] - подстрока от начала строки до символа с индексом 3, S[0],S[1],S[2] - 'Мол'\n
 S[:] - подстрока от начала и до конца строки, S[0],..,S[5] - 'Молоко'\n
 S[0:5:2] - подстрока от 0 до 5 с шагом 2, S[0],S[2],S[4] - 'Млк'\n
 S[::3] - подстрока от начала до конца с шагом 3: S[0],S[3] - 'Мо'\n
 S[::-1] - вся строка, но с отсчитывать с конца, с шагом -1: S[-1],S[-2],.. - 'околоМ'\n
 S[::-2] - вся строка, но с отсчитывать с конца, с шагом -2: S[-1],S[-3],S[-5] - 'ооо'\n
 S[-4:-2] - от индекса -4 ('л') до -2 ('к'), Мо{ло}ко - 'ло'\n
 S[-2:-4:-1] - от 'к' до 'л' в обратном порядке - Мол{ок}о - 'ко'\n\n 
 
 ",
   [
   ["X='Корова', тогда X[0] равно ?",'к',1],
   ["X='Корова'; n=2, тогда X[n] равно ?",'р',1],
   ["Z=X[2]+X[3]+X[4] чему равно Z ?",'ров',2],
   ["X[len(X)-2] равно ?",'в',3],
   ["X[2:5] - ?",'ров',2],
   ["N='01234567'; N[3:7] - ?",'3456',2],
   ["N[1::2] - ?",'135',2],
   ["S[-2]+N[2]+S[-1] - ?",'в1а',2]
   ]
 ]
],'str.pdf'
]