['0.5',"Инструкция. \nИзучение урока идет в несколько шагов.\n
На каждом шаге: сначала идет немного теории, \nа затем небольшой тест для проверки усвоения материала.\n",
 [
    ["*** Переменные ***\n\n
    Переменные в Python могут быть нескольких типов, в зависимости от их содержания. Покажем некоторые из типов.\n
    Строковые переменные (str):\n
    Name='Даша'\n
    School='Гимназия 45'\n
    City='Екатеринбург'\n\n
    Целые числа (int):\n
    Age=14\n
    Year=2021\n\n
    Списки (list):\n
    Teams=['Спартак','Динамо','Урал']\n
    listNum=[2,4,6,8] # список четных чисел до 10\n\n
    Словари (list):\n
    Marks={1:'очень плохо',2:'не удовлетворительно',3:'удовлетворительно', 
           4:'хорошо',5:'отлично'}\n\n
    На основании этих переменных можно выдать на монитор следующую строку:\n
    'Даша учится на хорошо и отлично. Она болеет за Спартак':\n\n
    print(Name,'учится на',Marks[4],' и ',Marks[5],'. Она болеет за',Teams[0])\n
    или по другому \n
    w=Name+' учится на '+Marks[4]+'. Она болеет за '+Teams[0]\n
    print(w)\n\n
*** Имена переменных ***\n\n
    Имена переменных могут состоять только  из букв, целых чисел и знака '_'.\n
    Имя должно начинаться с буквы или знака '_'.\n
    Буквы использовать настоятельно рекомендуем только из латиницы.\n
    Например: name, i, j_as , myCountry, i22, _k - правильные имена\n
    Неправильные имена: 34, 4What, t&t, email@name\n
    Переменные Name, name, NAME - это различные переменные!\n\n
*** Размещение переменных ***\n\n
    Во время присваивания переменной значения Python выполняет следующее:\n
    1) имя новой переменной запоминается в пространстве имен Python\n
    2) во время присвоения переменной определяется тип присваиваемого значения (строковая, числовая, ... )\n
    3) записывается значение переменной в оперативную память\n
    4) переменной дается ссылка на участок оперативной памяти, где хранится данное значение и тип переменной\n",
   [
    ['(*) _t_ - правильное наименование (y/n) ?','y',1],
    ['(*) NameOfMySister - правильное наименование ?','y',2],
    ['(*) Name#u - правильное наименование ?','n',2]
   ]
 ],
	["*** Числовые переменные ***\n
n=100\n
m=10.3\n
Также можно записать эти две команды в одну строку:\n
n=100; m=10.3\n

k=13e+12 	# 13 * 10 в 12 степени или 13 и далее 12 нулей\n
p=13000000000000  # длина целой переменной в Python'е практически безгранична \n
С числовыми переменными можно производить различные математические операции:\n
+ (сложение), - (вычитание), * (умножение), / (деление), \n**
** - возведение в степень,\n
// (целое деление, отбрасывается дробная часть без округления),\n
% (целый остаток от деления), round (округление) и т.д.\n
n=100 + 100%98 + 6/3 + 8//3 + 3**2 # 100+2+2+2+9\n
m=141/10  # 14.1\n
k=(100+10)/20 + (300-200)/10  # скобки задают порядок выполнения операций:\n
# (1) =(110)/20 + (100)/10\n
# (2) =110/20 + 100/10\n
# (3) =5.5 + 10\n
# (4) =15.5\n\n

n=13/5	# 2.3\n
m=13//5	# 3\n
k=13%5	# 2\n\n

Числовые переменные делятся на 2 типа: int (целые число) и float (числа с плавающей точкой)\n
n=10	# int\n
m=11.2	# float\n\n
	
Дополнительные функции:\n
- округление:\n
	round(12.354)	# 12, округление до целого\n
	round(12.354,1)	# 12.4, округление до одного знака после запятой\n
	round(12.354,2)	# 12.35, округление до второго знака после запятой\n
- квадратный корень из числа:\n
	import math		# подключим дополнительную библиотеку \n
	q=math.sqrt(16)	# 4, извлечение квадратного корня из числа 16\n
- перевод строковой переменной к числовой переменной:\n
	n=int('123')	# 123, int\n
	m=float('12.33')	# 12.33, float\n
	k=int(12.62)		# 12, int (из типа float в тип int)\n
	x=int('12.62')		# ОШИБКА\n
	y=int(float('12.62'))	# '12.62' > 12.62 > 12\n
	z=float(10)		# 10.0, float перевод типа int в тип float\n\n

Математические операции допустимы только между числовыми переменными.\n
n=100+'100' # ОШИБКА, второй операнд - строковая переменная\n
n=100+int('100')	# 200, второй операнд предварительно будет преобразован из '100' в число\n
	",
   [
   ['Тип полученного результата (int,float): 1 + 24','int',1],
   ['Тип полученного результата (int,float): 100 + 21.0 +10','float',2],
   ['Тип: 123 % 10','int',3],
   ['Сколько получиться: (100+200+300)/100+4','10',1],
   ['Сколько: (2**3 + (6+2))%5','1',2],
   ['Сколько: 100 + 109 // 10 - (17 % 9 +2)','100',3],
   ['Сколько: round(0.6)','1',1],
   ['Сколько: round(0.64,1)','0.6',2],
   ['Сколько: round(12.247,2)','12.25',1]
   ],
 'Доп.теория',
  [
  ['dQ1','y',1],
  ['dQ2','n',1]
  ]
],
 ["*** Вывод данных ***\n
 Для вывода данных на экран пользователя (или в файл) используется функция print()\n
 Примеры использования:\n
 Name='Вася'; n=12; i=101\n
 print('Конец работы')		# 'Конец работы'\n
 print('Привет,',Name,'!')	# 'Привет, Вася!'\n
 print('n=',n,'i=',i)		# 'n=12 i=101'\n\n
 В общем виде: print(p1,p2,..,sep='..',end='..'), \n
	где p1,p2,... - список переменных или литералов для вывода,\n
	дополнительные параметры: sep и end\n
	sep - разделитель между аргументами p1,p2,.. По умолчанию - один пробел.\n
	end - символ в конце строки вывода. По умолчанию - спецсимвол 'конец строки'\n
	спецсимвол '\\n' - начать последующий вывод с новой строки\n
	спецсимвол '\\t' - табуляция, печать со следующей колонки\n
print('Петр','Алексей',sep='')		# 'ПетрАлексей', печать двух литералов без пробела\n
print('Петр','Алексей',sep=' * ')	# 'Петр * Алексей'\n
print('Петр','Алексей',sep='\\n')	# 'Петр' и 'Алексей' с новой строки\n
print('Петр',end='@')	# первый print\n
print('Алексей')	# второй print: 'Петр@Алексей', два print печатают в одну строку\n
\n
печать в несколько колонок можно сделать с использованием табуляции: '\\t'\n
print('Петр',40,sep='\\t')\n
print('Василий',27,sep='\\t')\n
Петр... 40\n
Василий 27\n
здесь точками обозначены пробелы\n
тоже можно записать в виде одного print:\n
print('Петр\\t',40,'\\n','Василий',27,'sep='\\t')\n
 
 ",
   [
   ['print(\'Оля\',20,\'Маша\',30)','Оля 20 Маша 30',3],
   ['i=10;j=20; print(i,j,i+j)','10 20 30',2],
   ["print(1,20,300,'',sep='$, ')",'1$, 20$, 300$,',4]
   ],
   '...',
   [
   ['Q','y',1],['Q','y',1]
   ]
 ]
],'str.pdf'
]